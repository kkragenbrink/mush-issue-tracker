#
# Loki's Issue Tracker
# For new installations
# 

think [repeat(=, 78)]%r%r[center(ansi(h,Setting up Loki's Issue Tracker v0.9.0), 78)]%r%r[repeat(=, 78)]
-

@set me=QUIET
-

think [ansi(h, ISSUES:)] Checking current installation.
-

#
# Try to find Issues Global.
#

@switch 
    isdbref(setr(0, 
        switch(
            first(version()),
            PennMUSH,lsearch(all,eobjects,\[strmatch(name(##), %[LIT%] Loki's Issue Tracker)\]),
            RhostMUSH,searchng(object=%[LIT%] Loki's Issue Tracker),
            search(object=%[LIT%] Loki's Issue Tracker)
        )
    )) = 
    1, {
        think [ansi(h, ISSUES:)] Current installation found. Updating.;
        &ISS`GLOBAL %#=%q0;
        &ISS`CATEGORY_PARENT %#=[get(%q0/VC)];
    }, {
        think [ansi(h, ISSUES:)] No previous installation found. Installing.;
        &ISS`GLOBAL %#=[create(\[LIT\] Loki's Issue Tracker,10)];
        &DATA`TABLE_PREFIX [v(ISS`GLOBAL)]=lit_;
        &ISS`CATEGORY_PARENT %#=[create(\[LIT\] Loki's Issue Category Parent,10)];
        @tel [v(ISS`CATEGORY_PARENT)]=[v(ISS`GLOBAL)];
        @VC [v(ISS`GLOBAL)]=[v(ISS`CATEGORY_PARENT)];
        &ACCESS [v(ISS`CATEGORY_PARENT)]=1;
    }
-

#
# Tables
#

think [ansi(h, ISSUES:)] Configuring MySQL Tables.
-

@wait 0= 
{
    @assert sql(SELECT 1) = {think [ansi(h, ISSUES:)] ERROR - Unable to reach MySQL database. This installation will be incomplete.};
    @assert get(v(ISS`GLOBAL)/VERSION) =
    {
        think [ansi(h, ISSUES:)] Creating new tables.;
        think setq(0, get(v(ISS`GLOBAL)/DATA`TABLE_PREFIX));
        think sql(lit(
            CREATE TABLE `%q0issue`
            (
                `id` INT(11) UNSIGNED AUTO_INCREMENT,
                `title` VARCHAR(60) NOT NULL,
                `category` CHAR(5) NOT NULL,
                `owner` CHAR(10) NOT NULL,
                `status` CHAR(10) NOT NULL,
                `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                `due_at` TIMESTAMP,

                PRIMARY KEY (`id`),
                INDEX (`title`(10)),
                INDEX (`category`),
                INDEX (`owner`),
                INDEX (`status`)
            )
        ));

        think sql(lit(
            CREATE TABLE `%q0issue_note`
            (
                `id` INT(11) UNSIGNED AUTO_INCREMENT,
                `issue_id` INT(11) UNSIGNED,
                `author` CHAR(10) NOT NULL,
                `note` TINYTEXT NOT NULL,
                `type` CHAR(10) NOT NULL,
                `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                `deleted_at` TIMESTAMP,

                PRIMARY KEY (`id`),
                INDEX (`issue_id`),
                INDEX (`author`)
            )
        ));

        think sql(lit(
            CREATE TABLE `%q0issue_member`
            (
                `issue_id` INT(11) UNSIGNED,
                `member` CHAR(10) NOT NULL,
                
                PRIMARY KEY (`issue_id`, `member`),
                INDEX (`issue_id`),
                INDEX (`member`)
            )
        ));

        think sql(lit(
            CREATE TABLE `%q0issue_read`
            (
                `issue_id` INT(11) UNSIGNED,
                `note_id` INT(11) UNSIGNED,
                `reader` CHAR(10) NOT NULL,

                PRIMARY KEY (`issue_id`,`reader`),
                INDEX (`issue_id`),
                INDEX (`reader`)
            )
        ));
    };
}
-

#
# Commands
#

think [ansi(h, ISSUES:)] Setting up commands.
-

@aconnect [v(ISS`GLOBAL)]=
    @assert default(%#/ISS`LOGIN,1);
    @assert u(FUNCTION`IS_USER, %#);
    @force %#=+issues/new;
-

# +category/create <short>=<desc>
&COMMAND`CATEGORY/CREATE [v(ISS`GLOBAL)]=
$+category/create *=*:
    @assert u(FUNCTION`IS_SYSOP, %#) = {@pemit %#=Permission denied.};
    think setq(0, trim(secure(%0)));
    think setq(1, trim(secure(%1)));
    @break isdbref(u(FUNCTION`FIND_CATEGORY, %q0)) = {@pemit %#=There is already a category by that name.};
    @assert lte(strlen(%q0), 5) = {@pemit %#=The name of a category is limited to five letters.};
    think setq(2, create(ucstr(%q0), 10));
    @tel %q2=%vC;
    @parent %q2=%vC;
    @desc %q2=%q1;
    @set %q2=inherit !safe !halted !no_command;
    @lock/speech %q2=ACCESS/1;
    @pemit %#=You have created a category named [name(%q2)]. Be sure to change %q0/ACCESS to establish who can access the category. Presently, it is set to the default, which means that anyone who can access +issues can access the category.;
-

@switch [first(version())]=
    PennMUSH,{
        @edit [v(ISS`GLOBAL)]/COMMAND`CATEGORY/CREATE=inherit !safe !halted,wizard !safe !halt
    },
    TinyMUSH,{
        @edit [v(ISS`GLOBAL)]/COMMAND`CATEGORY/CREATE=!no_command,commands
    }
-

# +category/delete <category>=<new category>
&COMMAND`CATEGORY/DELETE [v(ISS`GLOBAL)]=
$+category/delete *=*:
    @assert u(FUNCTION`IS_SYSOP, %#) = {@pemit %#=Permission denied.};
    think setq(0, trim(secure(%0)));
    @assert isdbref(setr(1, u(FUNCTION`FIND_CATEGORY, %q0))) = {@pemit %#=You must specify a valid category to delete.};
    think setq(2, trim(secure(%1)));
    @assert isdbref(setr(3, u(FUNCTION`FIND_CATEGORY, %q2))) = {@pemit %#=You must specify a valid category to transfer active issues to.};
    think setq(4, name(%q1));
    @set %q1=DESTROY_OK;
    @nuke %q1;
    think sql(u(QUERY`UPDATE_ISSUE, `bucket`="%q3", WHERE `bucket` = "%q1"));
    @pemit %#=You have deleted the category named %q4 and transferred all issues to [name(%q3)].;
-

# +categories
&COMMAND`CATEGORIES [v(ISS`GLOBAL)]=
$+categories:
    @assert u(FUNCTION`IS_USER, %#)={@pemit %#=Permission denied.};
    @pemit %#=u(FUNCTION`HEADER, Categories);
    think setq(0, sortby(%!/SORT`BY_NAME, lcon(%vC)));
    @pemit %#=ulocal(VIEW`CATEGORY_LIST_HEADER);
    @pemit %#=list(%q0, ulocal(VIEW`CATEGORY_LIST, ##));
    @pemit %#=u(FUNCTION`FOOTER);
-

# +issue/create <title>=<body>
&COMMAND`ISSUE_CREATE [v(ISS`GLOBAL)]=
$+issue/create *=*:
    @trigger %!/TRIGGER`CREATE_ISSUE=%#, %0, %1, [v(DATA`DEFAULT_CATEGORY)];
-

# +request <title>=<body>
&COMMAND`REQUEST [v(ISS`GLOBAL)]=
$+request *=*:
    @trigger %!/TRIGGER`CREATE_ISSUE=%#, %0, %1, [u(FUNCTION`FIND_CATEGORY, REQ)];
-

# +bug <title>=<body>
&COMMAND`BUG [v(ISS`GLOBAL)]=
$+bug *=*:
    @trigger %!/TRIGGER`CREATE_ISSUE=%#, %0, %1, [u(FUNCTION`FIND_CATEGORY, BUG)];
-

# +issue <id>
&COMMAND`ISSUE_VIEW [v(ISS`GLOBAL)]=
$+issue *:
    @assert u(FUNCTION`IS_USER, %#)={@pemit %#=Permission denied.};
    think setq(0, secure(trim(%0)));
    @assert u(FUNCTION`IS_ISSUE, %q0)={@pemit %#=Invalid issue.};
    @assert cor(u(FUNCTION`IS_ADMIN, %#), u(FUNCTION`IS_MEMBER, %#, %q0))={@pemit %#=You do not have access to that issue.};
    @pemit %#=u(FUNCTION`HEADER, Issue %q0);
    @pemit %#=ulocal(VIEW`ISSUE_SUMMARY, %q0);
    think setq(1, u(FUNCTION`GET_NOTES, %q0));
    @pemit %#=list(%q1, ulocal(VIEW`ISSUE_NOTE, ##, %#));
    @pemit %#=u(FUNCTION`FOOTER);
    @trigger %!/TRIGGER`ISSUE_VIEWED=%#, %q0;
-

# +issue/add <id>=<note>
&COMMAND`ISSUE/ADD [v(ISS`GLOBAL)]=
$+issue/add *=*:
    @trigger %!/TRIGGER`ADD_NOTE=%#, %0, %1, ADD;
-

# +issue/full <id>
&COMMAND`ISSUE_FULL_VIEW [v(ISS`GLOBAL)]=
$+issue/full *:
    @assert u(FUNCTION`IS_USER, %#)={@pemit %#=Permission denied.};
    think setq(0, secure(trim(%0)));
    @assert u(FUNCTION`IS_ISSUE, %q0)={@pemit %#=Invalid issue.};
    @assert cor(u(FUNCTION`IS_ADMIN, %#), u(FUNCTION`IS_MEMBER, %#, %q0))={@pemit %#=You do not have access to that issue.};
    @pemit %#=u(FUNCTION`HEADER, Issue %q0);
    @pemit %#=ulocal(VIEW`ISSUE_SUMMARY, %q0);
    think setq(1, u(FUNCTION`GET_NOTES, %q0));
    @pemit %#=list(%q1, ulocal(VIEW`ISSUE_NOTE, ##, %#, 1));
    @pemit %#=u(FUNCTION`FOOTER);
    @trigger %!/TRIGGER`ISSUE_VIEWED=%#, %q0;
-


# +issue/status <id>=<status>
&COMMAND`ISSUE/SET [v(ISS`GLOBAL)]=
$+issue/set *=*:
    @trigger %!/TRIGGER`SET_STATUS=%#, %0, %1;
-

# +issues
&COMMAND`ISSUES [v(ISS`GLOBAL)]=
$+issues:
    @assert u(FUNCTION`IS_USER)={@pemit %#=Permission denied.};
    think setq(0, u(FUNCTION`GET_VISIBLE_ISSUES, %#));
    @pemit %#=u(FUNCTION`HEADER, Issues);
    @pemit %#=ulocal(VIEW`ISSUE_LIST_HEADER);
    @pemit %#=list(%q0, ulocal(VIEW`ISSUE_LIST, ##));
    @pemit %#=u(FUNCTION`FOOTER);
-

#
# Functions
#

think [ansi(h, ISSUES:)] Setting up functions.
-

# (find_category, <category>)
&FUNCTION`FIND_CATEGORY [v(ISS`GLOBAL)]=
    localize(ifelse(
        or(
            strmatch(name(setr(0,locate(%vC,%0,iT))),%0),
            strmatch(%q0,%0)
        ),
        %q0,
        #-1
    ))
-

# (footer)
&FUNCTION`FOOTER [v(ISS`GLOBAL)]=
    repeat(=, 78)
-

# (get_date, <timestamp>)
&FUNCTION`GET_DATE [v(ISS`GLOBAL)]=
    [ifelse(
        gt(%0, 0), 
        elements(convsecs(%0), 3 2 5 4), 
        -----
    )]
-

# (get_members, <issue_id>)
&FUNCTION`GET_MEMBERS [v(ISS`GLOBAL)]=
    iter(
        sql(u(QUERY`SELECT_MEMBER, WHERE `issue_id`=%0), `, |),
        elements(##, 3, |),
        `,
        %b
    )
-

# (get_notes, <issue_id>)
&FUNCTION`GET_NOTES [v(ISS`GLOBAL)]=
    iter(
        sql(u(QUERY`SELECT_NOTE, WHERE `issue_id`=%0), `, |),
        elements(##, 1, |),
        `,
        %b
    )
-

# (get_visible_issues, <dbref>)
&FUNCTION`GET_VISIBLE_ISSUES [v(ISS`GLOBAL)]=
    ifelse(
        u(FUNCTION`IS_ADMIN, %0),
        sql(u(QUERY`SELECT_ISSUES_BY_CATEGORY, filter(FUNCTION`HAS_ACCESS, lcon(%vC), %b, %b, %0,))),
        sql(u(QUERY`SELECT_ISSUES_BY_MEMBER, %0))
    )
-

# (has_access, <cat dbref>, <user dbref>)
&FUNCTION`HAS_ACCESS [v(ISS`GLOBAL)]=
    elock(%0/SPEECH, %1)
-

# (header, <text>)
&FUNCTION`HEADER [v(ISS`GLOBAL)]=
    center(%b[ansi(h,%0)]%b, 78, =)
-

# (is_admin, <dbref>)
&FUNCTION`IS_ADMIN [v(ISS`GLOBAL)]=
    hasflag(%0, STAFF)
-

# (is_issue, <issue_id>)
&FUNCTION`IS_ISSUE [v(ISS`GLOBAL)]=
    t(strlen(sql(u(QUERY`SELECT_ISSUE, WHERE `id` = %0))))
-

# (is_member, <issue_id>, <dbref>)
&FUNCTION`IS_MEMBER [v(ISS`GLOBAL)]=
    t(member(
        sql(u(QUERY`SELECT_MEMBERS, WHERE `issue_id` = %0)), 
        %1
    ))
-

# (is_sysop, <dbref>)
&FUNCTION`IS_SYSOP [v(ISS`GLOBAL)]=
    switch(
        first(version()),
        RhostMUSH, gte(bittype(%0), 5),
        hasflag(%0, WIZARD)
    )
-

# (is_user, <dbref>)
&FUNCTION`IS_USER [v(ISS`GLOBAL)]=
    not(switch(
        first(version()),
        RhostMUSH, eq(bittype(%0), 0),
        haspower(%0, GUEST)
    ))
-

# (is_visible_note, <type>, <author>, <dbref>)
&FUNCTION`IS_VISIBLE_NOTE [v(ISS`GLOBAL)]=
    cor(
        strmatch(MAIL, %0),
        cand(member(ADD CREATE, %0), eq(%1, %2)),
        cand(member(ADD CREATE, %0), u(FUNCTION`IS_ADMIN, %2)),
    )
-

# (owner_name, <dbref>)
&FUNCTION`OWNER_NAME [v(ISS`GLOBAL)]=
    ifelse(
        isdbref(%0), 
        left(name(%0),15), 
        Unassigned
    )
-

# (prefix)
&FUNCTION`PREFIX [v(ISS`GLOBAL)]=
    ansi(h, Issues:)
-

# (by_name, <dbref>, <dbref>)
&SORT`BY_NAME [v(ISS`GLOBAL)]=
    comp(name(%0),name(%1))
-

#
# Queries
#
think [ansi(h, ISSUES:)] Setting up queries.
-

&QUERY`COUNT_ISSUES [v(ISS`GLOBAL)]=
    SELECT COUNT(id) AS `count` 
    FROM `[v(DATA`TABLE_PREFIX)]issue`
    %1
-

&QUERY`CREATE_ISSUE [v(ISS`GLOBAL)]=
    INSERT INTO `[v(DATA`TABLE_PREFIX)]issue`
    SET %0
-

&QUERY`CREATE_ISSUE_MEMBER [v(ISS`GLOBAL)]=
    INSERT INTO `[v(DATA`TABLE_PREFIX)]issue_member`
    SET %0
-

&QUERY`CREATE_ISSUE_NOTE [v(ISS`GLOBAL)]=
    INSERT INTO `[v(DATA`TABLE_PREFIX)]issue_note`
    SET `issue_id`=%0, `author`="%1", `note`="[edit(%2, ", &quot;)]", `type`="%3"
-

&QUERY`LAST_INSERT_ID [v(ISS`GLOBAL)]=
    SELECT last_insert_id()
-

&QUERY`SELECT_ISSUES_BY_CATEGORY [v(ISS`GLOBAL)]=
    SELECT `id`
    FROM `[v(DATA`TABLE_PREFIX)]issue`
    WHERE `category` IN ([iter(%0, "##", , \,)])
-

&QUERY`SELECT_ISSUES_BY_MEMBER [v(ISS`GLOBAL)]=
    SELECT `[v(DATA`TABLE_PREFIX)]issue`.`id`
    FROM `[v(DATA`TABLE_PREFIX)]issue`
    JOIN `[v(DATA`TABLE_PREFIX)]issue_member`
    WHERE `[v(DATA`TABLE_PREFIX)]issue_member`.`member`="%0"
-

&QUERY`SELECT_ISSUE [v(ISS`GLOBAL)]=
    SELECT `id`,`title`,`category`,`owner`,`status`,UNIX_TIMESTAMP(`created_at`),UNIX_TIMESTAMP(`due_at`)
    FROM `[v(DATA`TABLE_PREFIX)]issue`
    %0
-

&QUERY`SELECT_MEMBER [v(ISS`GLOBAL)]=
    SELECT `id`,`issue_id`,`member`
    FROM `[v(DATA`TABLE_PREFIX)]issue_member`
    %0
-

&QUERY`SELECT_NOTE [v(ISS`GLOBAL)]=
    SELECT `id`,`issue_id`,`author`,`note`,`type`,UNIX_TIMESTAMP(`created_at`),UNIX_TIMESTAMP(`deleted_at`)
    FROM `[v(DATA`TABLE_PREFIX)]issue_note`
    %0
-

&QUERY`UPDATE_ISSUE [v(ISS`GLOBAL)]=
    UPDATE  `[v(DATA`TABLE_PREFIX)]issue` 
    SET %0 
    %1
-

# (update_member_read, <issue_id>, <note_id>, <dbref>)
&QUERY`UPDATE_MEMBER_READ [v(ISS`GLOBAL)]=
    REPLACE INTO `[v(DATA`TABLE_PREFIX)]issue_read`
    SET `issue_id`=%0, `note_id`=%1, `reader`="%2"
-

#
# Triggers
#
think [ansi(h, ISSUES:)] Setting up triggers.
-

# ADD_NOTE=<dbref>, <issue_id>, <body>, <type>
&TRIGGER`ADD_NOTE [v(ISS`GLOBAL)]=
    @assert u(FUNCTION`IS_USER, %0)={@pemit %0=Permission denied.};
    think setq(0, secure(trim(%1)));
    @assert u(FUNCTION`IS_ISSUE, %q0)={@pemit %0=Invalid issue.};
    @assert cor(u(FUNCTION`IS_ADMIN, %0), u(FUNCTION`IS_MEMBER, %0, %q0))={@pemit %0=You do not have access to that issue.};
    think setq(1, objeval(%0, trim(%2)));
    think sql(u(QUERY`CREATE_ISSUE_NOTE, %q0, %0, %q1, %3));
    @pemit %0=u(FUNCTION`PREFIX) You have added a note to issue #%q0.;
    @trigger %!/TRIGGER`NOTE_ADDED=%0, %q0, %3;
-

# CREATE_ISSUE=<dbref>, <title>, <body>, <category>
&TRIGGER`CREATE_ISSUE [v(ISS`GLOBAL)]=
    @assert u(FUNCTION`IS_USER, %0)={@pemit %0=Permission denied.};
    think setq(0, secure(trim(%1)));
    think setq(1, objeval(%0, trim(%2)));
    think sql(u(QUERY`CREATE_ISSUE, `title`="%q0"\, `category`="%3"\, `status`="[v(DATA`DEFAULT_STATUS)]"));
    think setq(2, sql(u(QUERY`LAST_INSERT_ID)));
    think sql(u(QUERY`CREATE_ISSUE_NOTE, %q2, %0, %q1, CREATE));
    think sql(u(QUERY`CREATE_ISSUE_MEMBER, `issue_id`=%q2\, `member`="%0"));
    @pemit %0=u(FUNCTION`PREFIX) You have submitted a new [name(%3)] issue #%q2: %q0.;
    @trigger %!/TRIGGER`ISSUE_CREATED=%0, %q2;
-

# ISSUE_VIEWED=<dbref>, <issue_id>
&TRIGGER`ISSUE_VIEWED [v(ISS`GLOBAL)]=
    think sql(u(QUERY`UPDATE_MEMBER_READ, %1, last(u(FUNCTION`GET_NOTES, %1)), %0));
-

# NOTE_ADDED=<dbref>, <issue_id>
&TRIGGER`NOTE_ADDED [v(ISS`GLOBAL)]=
    think sql(u(QUERY`UPDATE_MEMBER_READ, %1, last(u(FUNCTION`GET_NOTES, %1)), %0));
-

# SET_STATUS=<dbref>, <issue_id>, <status>
&TRIGGER`SET_STATUS [v(ISS`GLOBAL)]=
    @assert u(FUNCTION`IS_ADMIN, %0)={@pemit %0=Permission denied.};
    think setq(0, secure(trim(%1)));
    @assert u(FUNCTION`IS_ISSUE, %q0)={@pemit %0=Invalid issue.};
    think setq(1, ucstr(secure(trim(%2))));
    @assert t(member(v(DATA`STATUSES), %q1, |))={@pemit %0=Invalid status.};
    think setq(2, sql(u(QUERY`SELECT_ISSUE, WHERE `id`=%q0), |));
    think sql(u(QUERY`UPDATE_ISSUE, `status`="%q1", WHERE `id`=%q0));
    think sql(u(QUERY`CREATE_ISSUE_NOTE, %q0, %0, Status changed from [elements(%q2, 5, |)] to %q1, SET));
    @pemit %0=u(FUNCTION`PREFIX) You change the status of issue %q0 from [elements(%q2, 5, |)] to %q1.;
-

#
# Views
#
think [ansi(h, ISSUES:)] Setting up views.
-

&VIEW`CATEGORY_LIST_HEADER [v(ISS`GLOBAL)]=
    [ansi(h,
        Category [ljust(Description, 45)] Access Issues Overdue
    )]%r
    [repeat(-, 78)]
-

&VIEW`CATEGORY_LIST [v(ISS`GLOBAL)]=
    [ljust(name(%0), 9)]
    [ljust(left(get(%0/DESC), 45), 46)]
    [ljust(ifelse(elock(%0/SPEECH, %#), Yes, No), 7)]
    [center(sql(u(QUERY`COUNT_ISSUES, WHERE `category` = "%0")), 7)]
    [center(sql(u(QUERY`COUNT_ISSUES, WHERE `category` = "%0" AND `due_at` <= NOW\(\))), 8)]
-

&VIEW`ISSUE_LIST_HEADER [v(ISS`GLOBAL)]=
    [ansi(h,
        [ljust(#, 5)]
        [ljust(Cat, 6)]
        [ljust(Title, 30)]
        [ljust(Owner, 16)]
        [ljust(Status, 11)]
        [ljust(Due, 10)]
    )]%r
    [repeat(-, 78)]
-

&VIEW`ISSUE_LIST [v(ISS`GLOBAL)]=
    [setq(0, sql(u(QUERY`SELECT_ISSUE, WHERE `id`=%0),|))]
    [ljust(%0, 5)]
    [ljust(name(elements(%q0,3,|)), 6)]
    [ljust(left(elements(%q0,2,|),29),30)]
    [ljust(u(FUNCTION`OWNER_NAME, elements(%q0, 4, |)),16)]
    [ljust(elements(%q0,5,|),11)]
    [center(u(FUNCTION`GET_DATE,  elements(%q0,7,|)), 10)]
-

&VIEW`ISSUE_SUMMARY [v(ISS`GLOBAL)]=
    [setq(0, sql(u(QUERY`SELECT_ISSUE, WHERE `id`=%0), |))]
    [setq(1, u(FUNCTION`GET_MEMBERS))]

    [ansi(h, Title:)] [elements(%q0, 2, |)]%r

    [ljust([ansi(h, Category:)] [name(elements(%q0, 3, |))], 26)]
    [ljust([ansi(h, Status:)] [elements(%q0, 5, |)], 26)]
    [rjust([ansi(h, Owner:)] [u(FUNCTION`OWNER_NAME, elements(%q0, 4, |))], 26)]%r

    [ljust([ansi(h, Created:)] [u(FUNCTION`GET_DATE, elements(%q0, 6, |))], 39)]
    [rjust([ansi(h, Due:)] [u(FUNCTION`GET_DATE, elements(%q0, 7, |))], 39)]%r

    [ansi(h, Members:)] [itemize(iter(%q1, name(##)))]
-

&VIEW`ISSUE_NOTE [v(ISS`GLOBAL)]=
    [setq(0, sql(u(QUERY`SELECT_NOTE, WHERE `id`=%0), |))]

    [ifelse(
        cor(%2, ulocal(FUNCTION`IS_VISIBLE_NOTE, elements(%q0, 5, |), elements(%q0, 3, |), %1)),
        
        [repeat(-, sub(68, strlen(elements(%q0, 1, |))))] <#[elements(%q0, 1, |)]> -----%r
        [ifelse(
            not(elements(%q0, 7, |)),
            
            [ljust([ansi(h, Author:)] [name(elements(%q0, 3, |))], 20)]
            [ljust(elements(%q0, 5, |)[ifelse(ulocal(FUNCTION`IS_VISIBLE_NOTE, elements(%q0, 5, |), elements(%q0, 3, |), %1), ansi(hx, HIDDEN), @@())], 19)]
            [rjust([ansi(h, Date:)] [u(FUNCTION`GET_DATE, elements(%q0, 6, |))], 39)]%r
            [edit(elements(%q0, 4, |), &quot;, ")],

            [ansi(hx, Comment by [name(elements(%q0, 3, |))] deleted on [u(FUNCTION`GET_DATE, elements(%q0, 7, |))].)]
        )],

        [@@(Nothing to see here)]    
    )]
-

#
# Finalizing
#

think [ansi(h, ISSUES:)] Finalizing installation.
-

@switch hasattr(v(ISS`GLOBAL), DATA`DEFAULT_CATEGORY)=
    0,{
        think setq(0, get(v(ISS`GLOBAL)/VC));

        think setq(1, create(REQ, 10));
        @desc %q1=General requests.;
        @parent %q1=%q0;
        @tel %q1=%q0;
        &DATA`DEFAULT_CATEGORY [v(ISS`GLOBAL)]=%q1;

        think setq(1, create(BUG, 10));
        @desc %q1=Bug reports.;
        @parent %q1=%q0;
        @tel %q1=%q0;
    }
-

@switch hasattr(v(ISS`GLOBAL), DATA`STATUSES)=
    0,{
        &DATA`STATUSES [v(ISS`GLOBAL)]=NEW|UNDERWAY|PENDING|HOLD|CLOSED|REOPENED
    }
-

@switch hasattr(v(ISS`GLOBAL), DATA`DEFAULT_STATUS)=
    0,{
        &DATA`DEFAULT_STATUS [v(ISS`GLOBAL)]=NEW
    }
-

&VERSION [v(ISS`GLOBAL)]=0.1.0
-

@set me=!quiet
-

think [ansi(h, ISSUES:)] Done.
-